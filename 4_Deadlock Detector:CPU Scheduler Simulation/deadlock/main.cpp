/// =========================================================================
/// Copyright (C) 2022 Pavol Federl (pfederl@ucalgary.ca)
/// All Rights Reserved. Do not distribute this file.
/// =========================================================================
/// DO NOT EDIT THIS FILE. DO NOT SUBMIT THIS FILE FOR GRADING.

#include "common.h"
#include "find_deadlock.h"
#include <algorithm>
#include <cassert>
#include <chrono>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <memory>
#include <numeric>
#include <set>
#include <vector>

namespace {

using VS = std::vector<std::string>;

struct Timer {
    // return elapsed time (in seconds) since last reset/or construction
    // reset_p = true will reset the time
    double elapsed(bool resetFlag = false)
    {
        double result = 1e-6
            * std::chrono::duration_cast<std::chrono::microseconds>(
                  std::chrono::steady_clock::now() - start)
                  .count();
        if (resetFlag)
            reset();
        return result;
    }
    // reset the time to 0
    void reset() { start = std::chrono::steady_clock::now(); }
    Timer() { reset(); }

private:
    std::chrono::time_point<std::chrono::steady_clock> start;
};

std::string join(const VS & toks, const std::string & sep = " ")
{
    std::string res;
    bool first = true;
    for (auto & t : toks) {
        res += (first ? "" : sep) + t;
        first = false;
    }
    return res;
}

std::string stdin_readline()
{
    std::string result;
    while (1) {
        int c = fgetc(stdin);
        if (c == -1)
            break;
        result.push_back(c);
        if (c == '\n')
            break;
    }
    return result;
}

// std::string simplify(const std::string& str) { return join(split(str)); }

bool is_alnum(const std::string & str)
{
    for (int c : str)
        if (!isalnum(c))
            return false;
    return true;
}

int usage(const std::string & pname)
{
    std::cout << "Usage:\n"
              << "    " << pname << " < input\n"
              << "        - to process input from stdin\n";
    exit(-1);
}

int cppmain(const VS & args)
{
    if (args.size() != 1)
        usage(args[0]);
    std::cout << "Reading in lines from stdin...\n";
    VS all_lines;
    int line_no = 0;
    while (1) {
        // read in the next line and quit loop on EOF
        auto line = stdin_readline();
        if (line.size() == 0)
            break;
        line_no++;

        // get rid of trailing \n
        if (line.size() && line.back() == '\n')
            line.pop_back();

        // parse input line, skip empty lines
        auto toks = split(line);
        if (toks.size() == 0)
            continue;

        // validate line
        if (toks.size() != 3 || (toks[1] != "->" && toks[1] != "<-")
            || !is_alnum(toks[0]) || !is_alnum(toks[2])) {
            std::cout << "Syntax error on line " << line_no << ": " << line
                      << "\n";
            exit(-1);
        }

        all_lines.push_back(line);
    }

    std::cout << "Running find_deadlock()...\n";
    Timer timer;
    Result res = find_deadlock(all_lines);
    std::cout << "\n"
              << "index      : " << res.index << "\n"
              << "procs      : [" << join(res.procs, ",") << "]\n"
              << "real time  : " << std::fixed << std::setprecision(4)
              << timer.elapsed() << "s\n\n";
    return 0;
}
}; // anonnymouse namespace

int main(int argc, char ** argv)
{
    return cppmain({ argv + 0, argv + argc }); 
}
